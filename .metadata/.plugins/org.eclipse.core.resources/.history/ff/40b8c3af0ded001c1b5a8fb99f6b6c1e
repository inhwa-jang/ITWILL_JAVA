package exception;

public class Ex {

	public static void main(String[] args) {
		/*
		 * 예외(Exception)
		 * - 개발자가 의도하지 않은 상황에서 발생하는 문제로
		 *   프로그램이 비정상적으로 종료됨
		 *   => 예외가 발생한 위치부터 아래쪽의 코드들은 실행되지 못함
		 * - 오류(Error)와 달리 심각도가 낮으며, 예외 처리(Exception Handling)을
		 *   통해 예외 발생 시 해결책을 기술하여 비정상적인 종료를 막을 수 있음
		 * - 예외처리를 위해 try~catch 문을 사용하여 처리
		 *   => 예외가 발생할 것으로 예상되는 코드들을 try 블록 내에 기술하고,
		 *      예외가 발생하면 JVM 에 의해 해당 예외 객체를 전달받아
		 *      catch 블록 중 일치하는 타입에 대한 블록을 실행하여 예외 처리
		 *   => 만약, 일치하는 catch 블록이 없을 경우 프로그램은 비정상 종료됨
		 * - Execption 클래스 및 하위 클래스를 사용하여 예외 처리
		 * - 컴파일 시점에서 예외 발생 여부를 체크하는 Compile Checked Exception과
		 *   실행 시점에서 예외 발생 여부를 알 수 있는 Compile Unchecked Exception 계열로 나뉨
		 *   (Compile Checked Exception 계열 : IOException, SQLException 등)
		 *   (Compile Unchecked Exception 계열 : RuntimeExeption 계열 등)
		 *   
		 * < 예외 처리 기본 문법 >
		 * try {
		 * 		// 예외가 발생할 것으로 예상되는 범위의 코드들...
		 * 		// => 예외 발생 코드 아래쪽으로 나머지 코드는 실행되지 못함
		 * } catch(예외클래스명1 변수명) {
		 * 		// 예외클래스1에 해당하는 예외 발생 시 처리할 코드들...
		 * } catch(예외클래스명n 변수명) {
		 * 		// 예외클래스n에 해당하는 예외 발생 시 처리할 코드들...
		 * } finally {
		 * 		// 예외 발생 여부와 관계없이 무조건 실행할 문장들..
		 * 		// ex) DB 자원 반환, I/O 자원 반환 등
		 * }
		 */

		System.out.println("프로그램 시작!");
		
		// RuntimeException 클래스 계열들(Compile Unchecked Exception 계열)
		int num = 0;
		System.out.println(3 / num);
		
		
	}

}









